<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      A Second Course in Linear Algebra       -->
<!--                                              -->
<!-- Copyright (C) 2004-2014  Robert A. Beezer    -->
<!-- See the file COPYING for copying conditions. -->

<section xml:id="section-QR">
    <title>QR (Gram-Schmidt) Decomposition</title>

    <introduction>
        <p>The <term>QR decomposition</term> begins with any matrix and describes it as a product of a unitary matrix (<m>Q</m>) and an upper triangular matrix (<m>R</m>).  Hence the customary shorthand name, <q>QR</q>.  If the LU decomposition is reminiscent of reduced row-echelon form, then the QR decomposition is reminiscent of the <term>Gram-Schmidt</term> process (see Subsection <acroref type="subsection" acro="0.GSP" />).</p>
    </introduction>

    <subsection xml:id="subsection-QR-Gram-Schmidt">
        <title>QR Decomposition via Gram-Schmidt</title>
        
        <p>The Gram-Schmidt procedure is based on <acroref type="theorem" acro="GSP" />.  We begin with a set of linearly independent vectors and progressively convert them into a new set of nonzero vectors that form an orthogonal set, which can be easily converted to an orthonormal set.  An orthonormal set is a wondrous thing, so the other portion of the conclusion is often overlooked.  The new set of vectors spans the same subspace as the space spanned by the original set.  This is half the reason that the Gram-Schmidt procedure is so useful.</p>

        <p>As a preview of our main theorem, let's convert this idea into the language of matrices for a special case.  Let <m>A</m> be a square matrix of size <m>n</m>.  Take the columns of <m>A</m> as a set of vectors, which will form a basis of <m>\complex{n}</m>.  Apply the Gram-Schmidt procedure to this set of <m>n</m> vectors. The manufacture of the <m>i</m>-th vector of this new set is the <m>i</m>-th vector of the original set, added to a linear combination of vectors <m>1</m> through <m>i-1</m> of the new set.  If we recursively unpack these linear combinations, we can express each new vector as a linear combination of vectors <m>1</m> through <m>i</m> of the original set, where the <m>i</m>-th vector has a coefficient of <m>1</m>.  Record the scalars of this linear combination in a column vector, whose last nonzero entry is <m>1</m>.  Make these column vectors the columns of a square matrix, <m>R^\prime</m>, of size <m>n</m>.  Define <m>Q=AR^\prime</m>.</p>

        <p>By the Gram-Schmidt procedure, the columns of <m>Q</m> are an orthogonal set of nonzero vetors, and so <m>\adjoint{Q}Q</m> will be a diagonal matrix with nonzero entries.  The matrix <m>R^\prime</m> is square, upper-triangular, and each diagonal entry is <m>1</m>.  Hence <m>R^\prime</m> is invertible, so let <m>R</m> denote the inverse, which is again upper-triangular with diagonal entries equal to <m>1</m>.  We then obtain <m>A=QR</m>.  It is a simple matter to scale the columns of <m>Q</m> to form an orthonormal set, and the requisite scaling of the columns of <m>R^\prime</m> will not impede the existence of <m>R</m>, though we can only claim diagonal entries are nonzero. In this way, we can claim that <m>Q</m> is a unitary matrix.</p>

        <p>A QR decomposition can be created for any matrix <mdash /> it need not be square and it need not have full rank.  The matrix <m>Q</m> is unitary, and <m>R</m> is upper triangular.  Thus, each column of <m>A</m> can be expressed as a linear combination of the columns of <m>Q</m>, which form an orthonormal basis.  So the column space of <m>A</m> is spanned by an orthonormal subset of the columns of <m>Q</m>, giving us the essence of the Gram-Schmidt procedure without the hypothesis that our original set is linearly independent.  For the statement of <acroref type="theorem" acro="GSP" />, it was a convenience to hypothesize that <m>S</m> is linearly independent.  Can you examine the proof and see what changes are required if we lift this hypothesis?</p>
        
        <p>We now state, and prove, a sequence of theorems which solidify the discussion above and generalize to rectangular matrices that may not have full rank.</p>

        <theorem xml:id="theorem-thin-QR">
            <statement><p>Suppose that <m>A</m> is an <m>m\times n</m> matrix of rank <m>n</m>.  Then there exists an <m>m\times n</m> matrix <m>Q</m> whose columns form an orthonormal set, and an upper-triangular matrix <m>R</m> of size <m>n</m> with positive diagonal entries, such that <m>A = QR</m>.</p>
            </statement>

            <proof><p>Outline: Use Gram-Schmidt to successively build the columns.  Scale each column by positive/negative norm to get positive diagonal entries in <m>R</m>.</p></proof>
        </theorem>

        <p>Notice that the rank <m>n</m> condition of Theorem<nbsp /><xref ref="theorem-thin-QR" /> necessarily implies <m>m\geq n</m>.  We can expand <m>Q</m> and <m>R</m> simultaneously to get a decomposition where <m>Q</m> is a unitary matrix.</p>

        <p>The column space of a matrix is an important property of a matrix.  For example, the column space of the coefficient matrix of a system of equations is the set of vectors that can be used to form a consistent system when paired with the coefficient matrix (<acroref type="theorem" acro="CSCS" />).  Not only does <m>Q</m> have a column space equal to that of <m>A</m>, the first <m>i</m> columns of <m>Q</m> are a basis for the space spanned by the first <m>i</m> columns of <m>A</m>, for <m>1\leq i\leq n</m>.</p>

        <theorem xml:id="theorem-full-QR">
            <statement><p>Suppose that <m>A</m> is an <m>m\times n</m> matrix of rank <m>n</m>.  Then there exists a unitary matrix <m>Q</m> of size <m>m</m> and an upper-triangular <m>m\times n</m> matrix <m>R</m> with positive diagonal entries such that <m>A = QR</m>.</p>
            </statement>

            <proof>
                <p>Begin with a decomposition <m>A=Q^\prime R^\prime</m> as given by Theorem<nbsp /><xref ref="theorem-thin-QR" />.  Create the matrix <m>Q</m> by adding <m>m-n</m> columns to <m>Q^\prime</m> by the following process.  Find a vector outside the span of the current set of columns (<acroref type="theorem" acro="ELIS" />).  Apply the Gram-Schmidt procedure (<acroref type="theorem" acro="GSP" />) to the set of columns plus this one new vector.  The current columns will be unaffected by an additional application of the Gram-Schmidt procedure (so in a practical application it is unneccessary).  The one additional vector will be orthogonal to the others, and can be scaled to have norm <m>1</m>.  add this vector as a new column of <m>Q</m>, preserving the property that the columns are an orthonormal set.</p>

                <p>For each of the <m>m-n</m> new columns, add a new zero row to <m>R^\prime</m> creating the <m>m\times n</m> matrix <m>R</m>, with <m>QR = Q^\prime R^\prime = A</m>.</p>
            </proof>
        </theorem>

        <!-- TODO: Revisit thick/thin, reduced nomenclature -->

        <p>The decomposition of Theorem<nbsp /><xref ref="theorem-thin-QR" /> is referred to as a <term>thin</term> decomposition, while the decomposition of Theorem<nbsp /><xref ref="theorem-full-QR" /> is referred to as a <term>full</term> decomposition.</p>

        <p>What happens if <m>A</m> does not have full rank?  Then there will be some relation of linear dependence on the columns of the matrix.  In the course of working the Gram-Schmidt procedure, as in the construction given for the proof of Theorem<nbsp /><xref ref="theorem-thin-QR" />, this will be discovered when the newly created vector is the zero vector.  No matter, we simply add any vector as the next column of <m>Q</m> which will preserve the columns as an orthonormal set.  This vector can be determined in a fashion entirely similar to the device used in the proof of Theorem<nbsp /><xref ref="theorem-full-QR" />.  However, this nearly arbitrary choice outside the span of the current set of columns, requires that we add a row of zeros in <m>R</m> and lose our positive diagonal entry.  The ultimate price for this is that certain uniqueness results <xref provisional="uniqueness of QR" /> no longer hold.</p>

        <p>For the most general case of a QR decomposition for a rectangular matrix of arbitrary rank, we could fashion a proof based on the discussion of the previous paragraph.  However, while Gram-Schmidt provides a good theoretical grounding for the QR decomposition, in numerical contexts its performance is weak (<xref provisional="TB, Lecture 7 to 10" />).  Instead we give a constructive proof based on Householder reflections.</p>

    </subsection>

    <subsection>
        <title>QR Decomposition via Householder Reflections</title>

        <p>Householder reflections provide a usefull tool for creating the zero entries required in each column of <m>R</m>, and will provide an algorithm with better performance (speed and accuracy), compared to the more intuitive approach of the Gram-Schmidt procedure.</p>

        <theorem xml:id="theorem-general-QR">
            <statement><p>Suppose that <m>A</m> is an <m>m\times n</m> matrix.  Then there exists a unitary matrix <m>Q</m> of size <m>m</m> and an upper-triangular <m>m\times n</m> matrix <m>R</m> such that <m>A = QR</m>.</p>
            </statement>

            <proof>
                <p>We proceed by induction on <m>n</m>.  When <m>n=1</m> form the Householder matrix, <m>P</m>, which will convert all of the entries of the lone column of <m>A</m> into zeros, except the first one (Theorem<nbsp /><xref ref="theorem-householder-choice" />).  Denote the resulting column vector as the matrix <m>R</m>, which is upper triangular.  Define <m>Q=\adjoint{P}</m>, which is unitary.  Then <m>A = \adjoint{P}PA=QR</m>.</p>
                
                <p>Now consider general <m>n</m>.  Let <m>\hat{A}</m> be the first <m>n-1</m> columns of <m>A</m>, so by induction there is a unitary matrix <m>\hat{Q}</m> of size <m>m</m> and an upper-triangular matrix <m>\hat{R}</m> providing a QR decomposition of <m>\hat{A}</m>.  Partition <m>\hat{R}</m> into a square upper triangular matrix <m>R_1</m> comprised of the first <m>n-1</m> rows of <m>\hat{R}</m>, leaving a second matrix with <m>m-n+1</m> rows and zero in every entry.  Let <m>\vect{v}</m> denote the final column of <m>A</m> and compute <m>\vect{w}=\adjoint{\hat{Q}}\vect{v}</m>.  Partition <m>\vect{w}</m> into two pieces by denoting the first <m>n-1</m> entries as <m>\vect{w}_1</m>, and entries <m>n</m> through <m>m</m> as <m>\vect{w}_2</m>.  Compute the Householder matrix, <m>P</m>, of size <m>m-n+1</m> that takes <m>\vect{w}_2</m>, to a multiple of <m>\vect{e}_1</m>  (Theorem<nbsp /><xref ref="theorem-householder-choice" />).  We have all the pieces in place, so now observe:<md>
                <mrow>\left[\begin{array}{c|c}I_{n-1}&amp;0\\\hline0&amp;P\end{array}\right]
                \adjoint{\hat{Q}}A
                &amp;=\left[\begin{array}{c|c}I_{n-1}&amp;0\\\hline0&amp;P\end{array}\right]
                \adjoint{\hat{Q}}
                \left[\begin{array}{c|c}\hat{A}&amp;\vect{v}\end{array}\right]</mrow>
                <mrow>&amp;=
                \left[\begin{array}{c|c}I_{n-1}&amp;0\\\hline0&amp;P\end{array}\right]
                \left[\begin{array}{c|c}\adjoint{\hat{Q}}\hat{A}&amp;\adjoint{\hat{Q}}\vect{v}\end{array}\right]</mrow> 
                <mrow>&amp;=
                \left[\begin{array}{c|c}I_{n-1}&amp;0\\\hline0&amp;P\end{array}\right]
                \left[\begin{array}{c|c}\hat{R}&amp;\vect{w}\end{array}\right]</mrow> 
                <mrow>&amp;=
                \left[\begin{array}{c|c}I_{n-1}&amp;0\\\hline0&amp;P\end{array}\right]
                \left[\begin{array}{c|c}R_1&amp;\vect{w}_1\\\hline0&amp;\vect{w}_2\end{array}\right]</mrow>
                <mrow>&amp;=
                \left[\begin{array}{c|c}R_1&amp;\vect{w}_1\\\hline0&amp;P\vect{w}_2\end{array}\right]</mrow>
                </md></p>

                <p>Notice that the first two matrices in these equations are unitary, and hence so is their product.  Because of the action of the Householder matrix, the final matrix is upper triangular.  If we move the unitary matrix to the other side of the equation, with an inverse (adjoint), we arrive at a QR decomposition of <m>A</m> and complete the induction step.</p>

            </proof>
        </theorem>

        <p>The inductive proof of Theorem<nbsp /><xref ref="theorem-general-QR" /> will automatically provide a recipe for a recursive procedure to compute a QR decomposition.  But recursion is rarely, if ever, a good idea for efficiency.  Fortunately, the proof suggests a better procedure.  Work on <m>A</m> column-by-column, progressively using Householder matrices to <q>zero out</q> each column below the diagonal entry.  The construction of such a Householder matrix will require a nonzero entry in the diagonal entry.  A row swap, accomplished by a (unitary) permutation matrix, can move a nonzero entry from elsewhere in the column.  Of course, if the whole remainder of the column is all zeros, then we can just move on to the next column.</p>

        <p>Notice how the unitary matrices change over the course of these iterations.  In later steps each unitary matrix has a larger identity matrix as the block in the upper-left corner of the matrix.  So if a product of these matrices is required, it can be more efficient to begin building up the product starting with the last unitary matrix.  Of course, order matters in matrix multiplication, and maybe you need the product in the reverse order.  No matter, compute the transpose of the desired matrix, which necessarily will reverse the order of the product.  Once the product is concluded, then transpose the result.</p>

        <example xml:id="example-QR-size-4">
            <p>We illustrate the algorithm suggested by the proof of Theorem<nbsp /><xref ref="theorem-general-QR" /> on a <m>4\times 4</m> nonsingular matrix <m>A</m>.  All of our computations were performed in Sage using algebraic numbers, so there were no approximations of irrational square roots as floating point numbers.  However, we do give each matrix here with the final exact entries displayed as approximations with a limited number of places.  At step <m>i</m>, <m>1\leq i\leq 3</m>, we display the unitary Householder matrix, <m>Q_i</m>, and the partially upper triangular matrix <m>R_i=Q_i\dots Q_1A</m>.</p>

            <me>A=
               \begin{bmatrix}<![CDATA[
                4 & -5 & -7 & -4 \\
                1 & -1 & -1 & -2 \\
                0 & 0 & 1 & -1 \\
                -1 & 5 & 8 & -8
                ]]>\end{bmatrix}</me>

            <md>
                <mrow>i&amp;=1
                    &amp;
                    Q_1&amp;=
                    \begin{bmatrix}<![CDATA[
                    0.94 & 0.24 & 0.0 & -0.24 \\
                    0.24 & 0.03 & 0.0 & 0.97 \\
                    0.0 & 0.0 & 1.0 & 0.0 \\
                    -0.24 & 0.97 & 0.0 & 0.03
                    ]]>\end{bmatrix}
                    &amp;
                    R_1&amp;=
                    \begin{bmatrix}<![CDATA[
                    4.24 & -6.13 & -8.72 & -2.36 \\
                    0.0 & 3.65 & 6.09 & -8.77 \\
                    0.0 & 0.0 & 1.0 & -1.0 \\
                    0.0 & 0.35 & 0.91 & -1.23
                    ]]>\end{bmatrix}</mrow>
                <mrow>i&amp;=2
                    &amp;
                    Q_2&amp;=
                    \begin{bmatrix}<![CDATA[
                    1.0 & 0.0 & 0.0 & 0.0 \\
                    0.0 & 0.99 & 0.0 & 0.01 \\
                    0.0 & 0.0 & 1.0 & 0.0 \\
                    0.0 & 0.01 & 0.0 & -0.99
                    ]]>\end{bmatrix}
                    &amp;
                    R_2&amp;=
                    \begin{bmatrix}<![CDATA[
                    4.24 & -6.13 & -8.72 & -2.36 \\
                    0.0 & 3.67 & 6.15 & -8.85 \\
                    0.0 & 0.0 & 1.0 & -1.0 \\
                    0.0 & 0.0 & -0.32 & 0.39
                   ]]>\end{bmatrix}</mrow>
                <mrow>i&amp;=3
                    &amp;
                    Q_3&amp;=
                    \begin{bmatrix}<![CDATA[
                    1.0 & 0.0 & 0.0 & 0.0 \\
                    0.0 & 1.0 & 0.0 & 0.0 \\
                    0.0 & 0.0 & 0.95 & -0.31 \\
                    0.0 & 0.0 & -0.31 & -0.95
                    ]]>\end{bmatrix}
                    &amp;
                    R_3&amp;=
                    \begin{bmatrix}<![CDATA[
                    4.24 & -6.13 & -8.72 & -2.36 \\
                    0.0 & 3.67 & 6.15 & -8.85 \\
                    0.0 & 0.0 & 1.05 & -1.07 \\
                    0.0 & 0.0 & 0.0 & -0.06
                   ]]>\end{bmatrix}</mrow>
            </md>

            <p>So, 
                <me>R=R_3=
                \begin{bmatrix}<![CDATA[
                4.2426 & -6.1283 & -8.721 & -2.357 \\
                0.0 & 3.6667 & 6.1515 & -8.8485 \\
                0.0 & 0.0 & 1.0504 & -1.0701 \\
                0.0 & 0.0 & 0.0 & -0.0612
                ]]>\end{bmatrix}</me> and then <m>R=Q_3Q_2Q_1A</m>, so <me>Q=\adjoint{Q_1}\adjoint{Q_2}\adjoint{Q_3}=
                \begin{bmatrix}<![CDATA[
                0.9428 & 0.2121 & -0.0787 & -0.2448 \\
                0.2357 & 0.1212 & 0.2951 & 0.918 \\
                0.0 & 0.0 & 0.952 & -0.306 \\
                -0.2357 & 0.9697 & -0.0197 & -0.0612
                ]]>\end{bmatrix}</me></p>

            <p>Notice how the product for <m>Q</m> involves progressively simpler matrices (bigger identity matrix blocks) moving from right to left.</p>
        </example>
    </subsection>

    <subsection xml:id="subsection-solving-QR">
        <title>Solving Systems with a QR Decomposition</title>
        
        <p>Consider the problem of solving a linear system <m>A\vect{x}=\vect{b}</m>.  Replace <m>A</m> by a QR decomposition, to obtain <m>QR\vect{x}=\vect{b}</m>.  Now, the inverse of the unitary matrix <m>Q</m> is its adjoint, so we have the new system <m>R\vect{x}=\adjoint{Q}\vect{b}</m>.  Since <m>R</m> is upper-triangular, the new system can be solved via back-solving, much as we did with an LU decomposition (Subsection<nbsp /><xref ref="subsection-solving-LU" />).</p>

        <p>A primary advantage of this approach is that a unitary matrix is generally well-behaved in numerical computations.  Since the columns have unit norm, the entries can never be too large.  Many of the problems of floating-point arithmetic come from combining numbers of grossly different magnitudes, and this is avoided in computations with a unitary matrix, such as the matrix-vector product in the rearrangement of a linear system in the previous paragraph.</p>

        <p>What about the number of operations required?  For a QR decomposition of an <m>m\times n</m> matrix via the Gram-Schmidt procedure the operation count is <m>\orderof{2mn^2}</m>.  When <m>m\geq n</m> the determination of <m>R</m> can be accomplished in <m>\orderof{2mn^2-\frac{2}{3}n^3}</m> operations when using a sequence of Householder reflections (<xref provisional="TB Lecture 10" />).  This includes storing the Householder vector for each iteration, but not the computation of the Householder matrix itself, or the accumulated product of all the Householder matrices into one grand unitary matrix <m>Q</m>. Notice that for a square matrix, when <m>m=n</m>, the count is <m>\orderof{\frac{4}{3}n^3}</m>, which is twice the cost of an LU factorization</p>

        <p>If we use Householder reflections, then we must decide what we want to do with Householder matrices.  If we are solving a linear system, we can successively multiply each new Householder matrix times the column vector on the right hand side of the equation.  Thus, we modify both sides of the equation in the same way, producing equivalent systems as we go.  In practice, the product of a column vector by a Householder matrix can be accomplished very efficiently, and not by explicitly forming the matrix.  (See Exercise<nbsp /><xref ref="exercise-householder-matrix-vector-product" />.)  It should <em>never</em> be necessary to explicitly form a Householder matrix, but instead the Householder vector should be enough information to perform whatever computation is at hand.</p>
    </subsection>

    <subsection>
        <title>Uniqueness of QR Decompositions</title>

        <p>Generally, when <m>A</m> has full rank and we require that diagonal entries of <m>R</m> be positive, we get a unique QR decomposition.  Proving this will be easier once we learn about Cholesky decompositions (Section <xref provisional="a section about Cholesky decompositions" />), so we will defer a proof until then.</p>

    <!--     <theorem xml:id="theorem-thin-QR-unique">
            <statement><p>Suppose that <m>A</m> is an <m>m\times n</m> matrix of rank <m>n</m>.  Then a full QR decomposition into a unitary matrix <m>Q</m> of size <m>m</m> and an upper-triangular <m>m\times n</m> matrix <m>R</m> with positive diagonal entries is unique.</p>
            </statement>

            <proof>
                <p></p>
            </proof>
        </theorem>
     -->
    </subsection>

    <subsection>
        <title>Final Thoughts</title>

        <!-- TODO: QR still gives ON bases for column spaces -->

    </subsection>

    <exercise xml:id="exercise-QR-real-square-unique" >
        <statement>
            <p>Suppose that <m>A</m> is a nonsingular matrix with <em>real</em> entries.  Then <m>A</m> has a QR decomposition where (1) <m>A=QR</m>, (2) <m>Q</m> is unitary, and (3) <m>R</m> is upper triangular with positive entries, (4) <m>Q</m> and <m>R</m> are also matrices with real entries.  Prove that this decomposition is unique.  (So you may assume such a decomposition exists, you are just being asked to establish uniqueness.)</p>
        </statement>
        <solution>
            <p>Assume there are two such decompositions, so <m>R_1Q_1=A=R_2Q_2</m> and rearrange to obtain <m>\inverse{R_2}R_1=Q_2\adjoint{Q_1}</m>.  The left-hand side will be an upper triangular matrix with positive diagonal entries.  The right-hand side is a product of two unitary matrices, hence is unitary, and its columns form an orthonormal set.  Now, viewing the columns of the left-hand matrix as an orthonormal set will allow you to progressively conclude that the columns (from left to right) are the columns of an identity matrix.  Thus, <m>\inverse{R_2}R_1=I</m> and <m>R_1=R_2</m>, and similarly, <m>Q_1=Q_2</m>.</p>
        </solution>
    </exercise>

</section>